{
  "version": 3,
  "sources": ["picker.js"],
  "sourcesContent": ["import { useElement, useProps } from './core/element.js';\nimport { Select } from './core/utils/select.js';\nimport './ripple.js';\nimport './scroll-view.js';\nconst name = 's-picker';\nconst props = useProps({\n    disabled: false,\n    $label: '',\n    $value: ''\n});\nconst style = `:host{display:inline-block;vertical-align:middle;font-size:.875rem;--picker-border-radius: 4px;--picker-border-color: var(--s-color-outline, #70787D);--picker-border-width: 1px;--picker-padding: 16px;--picker-height: 48px}:host([disabled=true]){pointer-events:none;opacity:.38}.popup{display:block;cursor:pointer;position:relative}.ripple{border-radius:var(--picker-border-radius)}.field{--field-border-radius: var(--picker-border-radius);--field-border-color: var(--picker-border-color);--field-border-width: var(--picker-border-width);--field-padding: var(--picker-padding);height:var(--picker-height);width:100%;position:relative}.view{width:100%;padding-top:0;padding-bottom:0;padding:0 var(--picker-padding)}svg{width:24px;height:24px;padding:2px;box-sizing:border-box;flex-shrink:0;margin-left:min(0px,calc((var(--picker-padding) * -1) + 4px));margin-right:max(0px,calc(var(--picker-padding) - 12px));fill:var(--s-color-on-surface-variant, #40484C)}.container{max-height:408px;box-sizing:border-box;display:flex;flex-direction:column;font-size:.875rem;padding:4px 0;gap:4px}`\nconst template = `<s-popup class=\"popup\"><slot name=\"trigger\" slot=\"trigger\"><s-field fixed=\"false\" class=\"field\" part=\"field\"><div class=\"label\" slot=\"label\"></div><div class=\"view\"></div><svg viewBox=\"0 -960 960 960\" slot=\"end\"><path d=\"M480-360 280-560h400L480-360Z\"></path></svg><s-ripple slot=\"custom\" class=\"ripple\" attached=\"true\"></s-ripple></s-field></slot><s-scroll-view class=\"container\" part=\"container\"><slot id=\"slot\"></slot></s-scroll-view></s-popup>`\nexport class Picker extends useElement({\n    style, template, props,\n    setup(shadowRoot) {\n        const popup = shadowRoot.querySelector('.popup');\n        const field = shadowRoot.querySelector('.field');\n        const label = shadowRoot.querySelector('.label');\n        const view = shadowRoot.querySelector('.view');\n        const slot = shadowRoot.querySelector('#slot');\n        const container = shadowRoot.querySelector('.container');\n        const select = new Select({ context: this, class: PickerItem, slot });\n        popup.addEventListener('show', () => {\n            field.focused = true;\n            field.fixed = true;\n            if (!select.select) {\n                view.textContent = this.label;\n                view.style.opacity = '0';\n            }\n            container.style.minWidth = `${this.offsetWidth}px`;\n            if (select.select) {\n                container.scrollTo({ top: (select.select.offsetTop - container.offsetTop) - (container.offsetHeight / 2 - select.select.offsetHeight / 2) });\n            }\n        });\n        popup.onclose = () => {\n            field.focused = false;\n            !select.select && (field.fixed = false);\n        };\n        popup.addEventListener('closed', () => container.style.removeProperty('min-width'));\n        select.onUpdate = () => {\n            if (!select.select) {\n                field.fixed = false;\n                view.textContent = '';\n                return;\n            }\n            field.fixed = true;\n            view.style.removeProperty('opacity');\n            view.textContent = select.select.textContent;\n        };\n        select.onSelect = () => popup.close();\n        return {\n            expose: {\n                get options() {\n                    return select.list;\n                },\n                get selectedIndex() {\n                    return select.selectedIndex;\n                },\n                get show() {\n                    return popup.show;\n                },\n                get toggle() {\n                    return popup.toggle;\n                },\n                get close() {\n                    return popup.close;\n                }\n            },\n            label: (value) => label.textContent = value,\n            value: {\n                get: () => select.value,\n                set: (value) => select.value = value\n            }\n        };\n    }\n}) {\n}\nconst itemName = 's-picker-item';\nconst itemProps = useProps({\n    selected: false,\n    $value: ''\n});\nconst itemStyle = `:host{display:flex;align-items:center;height:40px;margin:0 4px;cursor:pointer;position:relative;border-radius:4px;flex-shrink:0;padding:0 12px;color:var(--s-color-on-surface, #191C1E)}:host([selected=true]){background:var(--s-color-secondary-container, #CFE6F1);color:var(--s-color-on-secondary-container, #354A53)}.text{flex-grow:1;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}::slotted(:is(svg,s-icon)){color:var(--s-color-on-surface-variant, #40484C);fill:currentColor;height:24px;width:24px}:host([selected=true]) ::slotted(:is(svg,s-icon)){color:currentColor}::slotted([slot]){flex-shrink:0}::slotted([slot=start]){margin-left:-4px;margin-right:8px}::slotted([slot=end]){margin-left:8px;margin-right:-4px}`\nconst itemTemplate = `<slot name=\"start\"></slot><div class=\"text\" part=\"text\"><slot></slot></div><slot name=\"end\"></slot><s-ripple part=\"ripple\" attached=\"true\"></s-ripple>`\nexport class PickerItem extends useElement({\n    style: itemStyle,\n    template: itemTemplate,\n    props: itemProps,\n    setup() {\n        this.addEventListener('click', () => {\n            if (this.selected)\n                return;\n            if (!(this.parentNode instanceof Picker))\n                return;\n            this.dispatchEvent(new Event(`${name}:select`, { bubbles: true }));\n        });\n        return {\n            selected: () => {\n                if (!(this.parentNode instanceof Picker))\n                    return;\n                this.dispatchEvent(new Event(`${name}:update`, { bubbles: true }));\n            }\n        };\n    }\n}) {\n}\nPicker.define(name);\nPickerItem.define(itemName);\n"],
  "mappings": "AAAA,OAAS,cAAAA,EAAY,YAAAC,MAAgB,oBACrC,OAAS,UAAAC,MAAc,yBACvB,MAAO,cACP,MAAO,mBACP,MAAMC,EAAO,WACPC,EAAQH,EAAS,CACnB,SAAU,GACV,OAAQ,GACR,OAAQ,EACZ,CAAC,EACKI,EAAQ,2jCACRC,EAAW,kcACV,MAAMC,UAAeP,EAAW,CACnC,MAAAK,EAAO,SAAAC,EAAU,MAAAF,EACjB,MAAMI,EAAY,CACd,MAAMC,EAAQD,EAAW,cAAc,QAAQ,EACzCE,EAAQF,EAAW,cAAc,QAAQ,EACzCG,EAAQH,EAAW,cAAc,QAAQ,EACzCI,EAAOJ,EAAW,cAAc,OAAO,EACvCK,EAAOL,EAAW,cAAc,OAAO,EACvCM,EAAYN,EAAW,cAAc,YAAY,EACjDO,EAAS,IAAIb,EAAO,CAAE,QAAS,KAAM,MAAOc,EAAY,KAAAH,CAAK,CAAC,EACpE,OAAAJ,EAAM,iBAAiB,OAAQ,IAAM,CACjCC,EAAM,QAAU,GAChBA,EAAM,MAAQ,GACTK,EAAO,SACRH,EAAK,YAAc,KAAK,MACxBA,EAAK,MAAM,QAAU,KAEzBE,EAAU,MAAM,SAAW,GAAG,KAAK,WAAW,KAC1CC,EAAO,QACPD,EAAU,SAAS,CAAE,IAAMC,EAAO,OAAO,UAAYD,EAAU,WAAcA,EAAU,aAAe,EAAIC,EAAO,OAAO,aAAe,EAAG,CAAC,CAEnJ,CAAC,EACDN,EAAM,QAAU,IAAM,CAClBC,EAAM,QAAU,GAChB,CAACK,EAAO,SAAWL,EAAM,MAAQ,GACrC,EACAD,EAAM,iBAAiB,SAAU,IAAMK,EAAU,MAAM,eAAe,WAAW,CAAC,EAClFC,EAAO,SAAW,IAAM,CACpB,GAAI,CAACA,EAAO,OAAQ,CAChBL,EAAM,MAAQ,GACdE,EAAK,YAAc,GACnB,MACJ,CACAF,EAAM,MAAQ,GACdE,EAAK,MAAM,eAAe,SAAS,EACnCA,EAAK,YAAcG,EAAO,OAAO,WACrC,EACAA,EAAO,SAAW,IAAMN,EAAM,MAAM,EAC7B,CACH,OAAQ,CACJ,IAAI,SAAU,CACV,OAAOM,EAAO,IAClB,EACA,IAAI,eAAgB,CAChB,OAAOA,EAAO,aAClB,EACA,IAAI,MAAO,CACP,OAAON,EAAM,IACjB,EACA,IAAI,QAAS,CACT,OAAOA,EAAM,MACjB,EACA,IAAI,OAAQ,CACR,OAAOA,EAAM,KACjB,CACJ,EACA,MAAQQ,GAAUN,EAAM,YAAcM,EACtC,MAAO,CACH,IAAK,IAAMF,EAAO,MAClB,IAAME,GAAUF,EAAO,MAAQE,CACnC,CACJ,CACJ,CACJ,CAAC,CAAE,CACH,CACA,MAAMC,EAAW,gBACXC,EAAYlB,EAAS,CACvB,SAAU,GACV,OAAQ,EACZ,CAAC,EACKmB,EAAY,stBACZC,EAAe,yJACd,MAAML,UAAmBhB,EAAW,CACvC,MAAOoB,EACP,SAAUC,EACV,MAAOF,EACP,OAAQ,CACJ,YAAK,iBAAiB,QAAS,IAAM,CAC7B,KAAK,UAEH,KAAK,sBAAsBZ,GAEjC,KAAK,cAAc,IAAI,MAAM,GAAGJ,CAAI,UAAW,CAAE,QAAS,EAAK,CAAC,CAAC,CACrE,CAAC,EACM,CACH,SAAU,IAAM,CACN,KAAK,sBAAsBI,GAEjC,KAAK,cAAc,IAAI,MAAM,GAAGJ,CAAI,UAAW,CAAE,QAAS,EAAK,CAAC,CAAC,CACrE,CACJ,CACJ,CACJ,CAAC,CAAE,CACH,CACAI,EAAO,OAAOJ,CAAI,EAClBa,EAAW,OAAOE,CAAQ",
  "names": ["useElement", "useProps", "Select", "name", "props", "style", "template", "Picker", "shadowRoot", "popup", "field", "label", "view", "slot", "container", "select", "PickerItem", "value", "itemName", "itemProps", "itemStyle", "itemTemplate"]
}
