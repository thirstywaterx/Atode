{
  "version": 3,
  "sources": ["segmented-button.js"],
  "sourcesContent": ["import { useElement, useProps } from './core/element.js';\nimport { Select } from './core/utils/select.js';\nimport { convertCSSDuration } from './core/utils/CSSUtils.js';\nimport './ripple.js';\nconst name = 's-segmented-button';\nconst props = useProps({\n    $value: '',\n    mode: ['auto', 'fixed']\n});\nconst style = `:host{display:inline-flex;vertical-align:middle;align-items:center;border-radius:20px;height:40px;padding:3px;overflow:hidden;box-sizing:border-box;border:solid 1px var(--s-color-surface-variant, #C0C8CC);background:var(--s-color-surface-container, #ECEEF0)}:host([mode=fixed]){display:flex}:host([mode=fixed]) ::slotted(s-segmented-button-item){flex-basis:100%}`\nconst template = `<slot></slot>`\nexport class SegmentedButton extends useElement({\n    style, template, props,\n    setup(shadowRoot) {\n        const slot = shadowRoot.querySelector('slot');\n        const select = new Select({ context: this, class: SegmentedButtonItem, slot });\n        const computedStyle = getComputedStyle(this);\n        const getAnimateOptions = () => {\n            const easing = computedStyle.getPropertyValue('--s-motion-easing-standard') || \"cubic-bezier(0.2, 0, 0, 1.0)\" /* Theme.motionEasingStandard */;\n            const duration = computedStyle.getPropertyValue('--s-motion-duration-medium4') || \"400ms\" /* Theme.motionDurationMedium4 */;\n            return { easing: easing, duration: convertCSSDuration(duration) };\n        };\n        select.onUpdate = (old) => {\n            if (!old || !select.select || !this.isConnected)\n                return;\n            const oldRect = old.shadowRoot.querySelector('.indicator').getBoundingClientRect();\n            const indicator = select.select.shadowRoot.querySelector('.indicator');\n            const rect = indicator.getBoundingClientRect();\n            const offset = oldRect.left - rect.left;\n            indicator.style.transform = `translateX(${rect.left > oldRect.left ? offset : Math.abs(offset)}px)`;\n            indicator.style.width = `${oldRect.width}px`;\n            old.style.zIndex = '1';\n            const animation = indicator.animate([{ transform: `translateX(0)`, width: `${rect.width}px` }], getAnimateOptions());\n            animation.onfinish = animation.oncancel = animation.onremove = () => {\n                indicator.style.removeProperty('transform');\n                indicator.style.removeProperty('width');\n                old.style.removeProperty('z-index');\n            };\n        };\n        return {\n            expose: {\n                get options() {\n                    return select.list;\n                },\n                get selectedIndex() {\n                    return select.selectedIndex;\n                },\n            },\n            value: {\n                get: () => select.value,\n                set: (value) => select.value = value\n            }\n        };\n    }\n}) {\n}\nconst itemName = 's-segmented-button-item';\nconst itemProps = useProps({\n    selected: false,\n    disabled: false,\n    selectable: true,\n    $value: ''\n});\nconst itemStyle = `:host{display:flex;justify-content:center;align-items:center;height:100%;min-width:64px;padding:0 16px;text-transform:capitalize;cursor:pointer;font-weight:500;font-size:.8125rem;position:relative;box-sizing:border-box;border-radius:20px;transition:color var(--s-motion-duration-medium4, .4s) var(--s-motion-easing-standard, cubic-bezier(.2, 0, 0, 1));color:var(--s-color-on-surface, #191C1E)}:host([selected=true]){color:var(--s-color-on-primary, #ffffff)}:host([disabled=true]){pointer-events:none;color:color-mix(in srgb,var(--s-color-on-surface, #191C1E) 38%,transparent)}.indicator{position:absolute;left:0;top:0;width:100%;height:100%;opacity:0;border-radius:inherit;background:var(--s-color-primary, #006782)}:host([selected=true]) .indicator{opacity:1}::slotted([slot]){width:18px;height:18px;color:inherit;fill:currentColor;flex-shrink:0;position:relative}::slotted([slot=start]){margin-right:4px}::slotted([slot=end]){margin-right:4px}.text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;min-width:0;position:relative}@supports not (color: color-mix(in srgb,black,white)){:host([disabled=true]){opacity:.38;color:var(--s-color-on-surface, #191C1E)}}`\nconst itemTemplate = `<div class=\"indicator\" part=\"indicator\"></div><slot name=\"start\"></slot><div class=\"text\" part=\"text\"><slot></slot></div><slot name=\"end\"></slot><s-ripple attached=\"true\" part=\"ripple\"></s-ripple>`\nexport class SegmentedButtonItem extends useElement({\n    style: itemStyle,\n    template: itemTemplate,\n    props: itemProps,\n    setup() {\n        this.addEventListener('click', () => {\n            if (!(this.parentNode instanceof SegmentedButton) || this.selected)\n                return;\n            if (this.selectable)\n                this.dispatchEvent(new Event(`${name}:select`, { bubbles: true }));\n        });\n        return {\n            selected: () => {\n                if (!(this.parentNode instanceof SegmentedButton))\n                    return;\n                this.dispatchEvent(new CustomEvent(`${name}:update`, { bubbles: true, detail: {} }));\n            }\n        };\n    }\n}) {\n}\nSegmentedButton.define(name);\nSegmentedButtonItem.define(itemName);\n"],
  "mappings": "AAAA,OAAS,cAAAA,EAAY,YAAAC,MAAgB,oBACrC,OAAS,UAAAC,MAAc,yBACvB,OAAS,sBAAAC,MAA0B,2BACnC,MAAO,cACP,MAAMC,EAAO,qBACPC,EAAQJ,EAAS,CACnB,OAAQ,GACR,KAAM,CAAC,OAAQ,OAAO,CAC1B,CAAC,EACKK,EAAQ,6WACRC,EAAW,gBACV,MAAMC,UAAwBR,EAAW,CAC5C,MAAAM,EAAO,SAAAC,EAAU,MAAAF,EACjB,MAAMI,EAAY,CACd,MAAMC,EAAOD,EAAW,cAAc,MAAM,EACtCE,EAAS,IAAIT,EAAO,CAAE,QAAS,KAAM,MAAOU,EAAqB,KAAAF,CAAK,CAAC,EACvEG,EAAgB,iBAAiB,IAAI,EACrCC,EAAoB,IAAM,CAC5B,MAAMC,EAASF,EAAc,iBAAiB,4BAA4B,GAAK,+BACzEG,EAAWH,EAAc,iBAAiB,6BAA6B,GAAK,QAClF,MAAO,CAAE,OAAQE,EAAQ,SAAUZ,EAAmBa,CAAQ,CAAE,CACpE,EACA,OAAAL,EAAO,SAAYM,GAAQ,CACvB,GAAI,CAACA,GAAO,CAACN,EAAO,QAAU,CAAC,KAAK,YAChC,OACJ,MAAMO,EAAUD,EAAI,WAAW,cAAc,YAAY,EAAE,sBAAsB,EAC3EE,EAAYR,EAAO,OAAO,WAAW,cAAc,YAAY,EAC/DS,EAAOD,EAAU,sBAAsB,EACvCE,EAASH,EAAQ,KAAOE,EAAK,KACnCD,EAAU,MAAM,UAAY,cAAcC,EAAK,KAAOF,EAAQ,KAAOG,EAAS,KAAK,IAAIA,CAAM,CAAC,MAC9FF,EAAU,MAAM,MAAQ,GAAGD,EAAQ,KAAK,KACxCD,EAAI,MAAM,OAAS,IACnB,MAAMK,EAAYH,EAAU,QAAQ,CAAC,CAAE,UAAW,gBAAiB,MAAO,GAAGC,EAAK,KAAK,IAAK,CAAC,EAAGN,EAAkB,CAAC,EACnHQ,EAAU,SAAWA,EAAU,SAAWA,EAAU,SAAW,IAAM,CACjEH,EAAU,MAAM,eAAe,WAAW,EAC1CA,EAAU,MAAM,eAAe,OAAO,EACtCF,EAAI,MAAM,eAAe,SAAS,CACtC,CACJ,EACO,CACH,OAAQ,CACJ,IAAI,SAAU,CACV,OAAON,EAAO,IAClB,EACA,IAAI,eAAgB,CAChB,OAAOA,EAAO,aAClB,CACJ,EACA,MAAO,CACH,IAAK,IAAMA,EAAO,MAClB,IAAMY,GAAUZ,EAAO,MAAQY,CACnC,CACJ,CACJ,CACJ,CAAC,CAAE,CACH,CACA,MAAMC,EAAW,0BACXC,EAAYxB,EAAS,CACvB,SAAU,GACV,SAAU,GACV,WAAY,GACZ,OAAQ,EACZ,CAAC,EACKyB,EAAY,qpCACZC,EAAe,uMACd,MAAMf,UAA4BZ,EAAW,CAChD,MAAO0B,EACP,SAAUC,EACV,MAAOF,EACP,OAAQ,CACJ,YAAK,iBAAiB,QAAS,IAAM,CAC7B,EAAE,KAAK,sBAAsBjB,IAAoB,KAAK,UAEtD,KAAK,YACL,KAAK,cAAc,IAAI,MAAM,GAAGJ,CAAI,UAAW,CAAE,QAAS,EAAK,CAAC,CAAC,CACzE,CAAC,EACM,CACH,SAAU,IAAM,CACN,KAAK,sBAAsBI,GAEjC,KAAK,cAAc,IAAI,YAAY,GAAGJ,CAAI,UAAW,CAAE,QAAS,GAAM,OAAQ,CAAC,CAAE,CAAC,CAAC,CACvF,CACJ,CACJ,CACJ,CAAC,CAAE,CACH,CACAI,EAAgB,OAAOJ,CAAI,EAC3BQ,EAAoB,OAAOY,CAAQ",
  "names": ["useElement", "useProps", "Select", "convertCSSDuration", "name", "props", "style", "template", "SegmentedButton", "shadowRoot", "slot", "select", "SegmentedButtonItem", "computedStyle", "getAnimateOptions", "easing", "duration", "old", "oldRect", "indicator", "rect", "offset", "animation", "value", "itemName", "itemProps", "itemStyle", "itemTemplate"]
}
