{
  "version": 3,
  "sources": ["snackbar.js"],
  "sourcesContent": ["import { useElement, useProps, useEvents } from './core/element.js';\nimport { getStackingContext } from './core/utils/getStackingContext.js';\nimport { mediaQueryList } from './core/utils/mediaQuery.js';\nimport { convertCSSDuration } from './core/utils/CSSUtils.js';\nconst name = 's-snackbar';\nconst props = useProps({\n    type: ['none', 'info', 'success', 'warning', 'error'],\n    align: ['auto', 'top', 'bottom'],\n    $duration: 4000\n});\nconst events = useEvents({\n    show: Event,\n    showed: Event,\n    closed: Event\n});\nconst style = `:host{display:inline-block;vertical-align:middle}.popup{position:fixed;inset:0;width:100%;height:100%;background:none;border:none;outline:none;max-width:none;max-height:none;display:none;overflow:hidden;box-sizing:border-box;pointer-events:none;padding:16px;justify-content:center;transition:transform var(--s-motion-duration-medium4, .4s) var(--s-motion-easing-standard, cubic-bezier(.2, 0, 0, 1))}.popup.show{display:flex}.container{outline:none;align-self:flex-end;width:fit-content;display:flex;align-items:center;min-height:48px;line-height:22px;border-radius:4px;padding:6px 16px;font-size:.875rem;font-weight:500;box-sizing:border-box;max-width:320px;transition:box-shadow var(--s-motion-duration-medium4, .4s) var(--s-motion-easing-standard, cubic-bezier(.2, 0, 0, 1));box-shadow:var(--s-elevation-level3, 0 5px 5px -3px rgba(0, 0, 0, .2), 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12));background:var(--s-color-inverse-surface, #2E3132);color:var(--s-color-inverse-on-surface, #EFF1F3)}.text{flex-grow:1;min-width:0;user-select:text;-webkit-user-select:text}.icon{display:none}:host([type=info]) .info,:host([type=success]) .success,:host([type=warning]) .warning,:host([type=error]) .error{display:block}:host([type=info]) .container{color:var(--s-color-on-secondary, #ffffff);background:var(--s-color-secondary, #4C616B)}:host([type=success]) .container{color:var(--s-color-on-success, #ffffff);background:var(--s-color-success, #006d43)}:host([type=warning]) .container{color:var(--s-color-on-warning, #ffffff);background:var(--s-color-warning, #6f5d00)}:host([type=error]) .container{color:var(--s-color-on-error, #ffffff);background:var(--s-color-error, #BA1A1A)}:host([type=info]) ::slotted([slot=action]),:host([type=success]) ::slotted([slot=action]),:host([type=warning]) ::slotted([slot=action]),:host([type=error]) ::slotted([slot=action]){color:currentColor}svg,::slotted([slot=icon]){width:24px;height:24px;color:currentColor;fill:currentColor;margin-right:12px;margin-left:-4px}::slotted([slot=action]){font-size:inherit;flex-shrink:0;display:inline-flex;align-items:center;padding:0 12px;border-radius:4px;margin-right:-8px;margin-left:12px;cursor:pointer;height:36px;font-size:.875rem;color:var(--s-color-inverse-primary, #60D4FE)}@media (max-width: 375px){.popup{padding:8px}}@media (pointer: fine){.container:hover{box-shadow:var(--s-elevation-level4, 0 8px 10px -5px rgba(0, 0, 0, .2), 0 16px 24px 2px rgba(0, 0, 0, .14), 0 6px 30px 5px rgba(0, 0, 0, .12))}}`\nconst template = `<slot name=\"trigger\"></slot><div class=\"popup\" popover=\"manual\" part=\"popup\"><div class=\"container\" part=\"container\"><slot name=\"icon\"><svg viewBox=\"0 0 24 24\" class=\"icon info\"><path d=\"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"></path></svg> <svg viewBox=\"0 0 24 24\" class=\"icon success\"><path d=\"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"></path></svg> <svg viewBox=\"0 0 24 24\" class=\"icon warning\"><path d=\"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"></path></svg> <svg viewBox=\"0 0 24 24\" class=\"icon error\"><path d=\"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path></svg></slot><div class=\"text\" part=\"text\"><slot></slot></div><slot name=\"action\"></slot></div></div>`\nconst builder = (options) => {\n    let root = document.body;\n    const snackbar = new Snackbar();\n    snackbar.style.display = 'block';\n    const page = document.body.firstElementChild;\n    if (page && page.tagName === 'S-PAGE') {\n        root = page;\n    }\n    if (typeof options === 'string') {\n        snackbar.textContent = options;\n    }\n    else {\n        if (options.root)\n            root = options.root;\n        if (options.align)\n            snackbar.align = options.align;\n        if (options.icon) {\n            if (options.icon instanceof Element) {\n                options.icon.slot = 'icon';\n                snackbar.appendChild(options.icon);\n            }\n            if (typeof options.icon === 'string') {\n                snackbar.innerHTML = options.icon;\n            }\n        }\n        snackbar.append(options.text);\n        if (options.type)\n            snackbar.type = options.type;\n        if (options.action) {\n            const action = document.createElement('s-button');\n            action.type = 'text';\n            action.slot = 'action';\n            if (typeof options.action === 'string') {\n                action.textContent = options.action;\n            }\n            else {\n                action.textContent = options.action.text;\n                action.addEventListener('click', options.action.click);\n            }\n            snackbar.appendChild(action);\n        }\n        if (typeof options.duration === 'number')\n            snackbar.duration = options.duration;\n    }\n    root.appendChild(snackbar);\n    snackbar.addEventListener('closed', () => root.removeChild(snackbar));\n    snackbar.show();\n    return snackbar;\n};\nconst tasks = {\n    top: [],\n    bottom: [],\n};\nexport class Snackbar extends useElement({\n    style, template, props, events, methods: { builder },\n    setup(shadowRoot) {\n        const popup = shadowRoot.querySelector('.popup');\n        const container = shadowRoot.querySelector('.container');\n        const computedStyle = getComputedStyle(this);\n        const getAnimateOptions = () => {\n            const easing = computedStyle.getPropertyValue('--s-motion-easing-standard') || \"cubic-bezier(0.2, 0, 0, 1.0)\" /* Theme.motionEasingStandard */;\n            const duration = computedStyle.getPropertyValue('--s-motion-duration-medium4') || \"400ms\" /* Theme.motionDurationMedium4 */;\n            return { easing: easing, duration: convertCSSDuration(duration) };\n        };\n        const state = { timer: 0, gap: 8 };\n        const getAlign = () => this.align === 'auto' ? (mediaQueryList.pointerCoarse.matches ? 'top' : 'bottom') : this.align;\n        const show = () => {\n            if (!this.isConnected || popup.classList.contains('show'))\n                return;\n            popup.classList.add('show');\n            if (popup.showPopover) {\n                popup.showPopover();\n            }\n            else {\n                const rect = getStackingContext(shadowRoot);\n                popup.style.width = `${innerWidth}px`;\n                popup.style.height = `${innerHeight}px`;\n                popup.style.marginLeft = `${-rect.left}px`;\n                popup.style.marginTop = `${-rect.top}px`;\n                popup.style.zIndex = '3';\n            }\n            const align = getAlign();\n            container.style.alignSelf = { top: 'flex-start', bottom: 'flex-end' }[align];\n            const task = tasks[align];\n            const offset = { top: 1, bottom: -1 }[align];\n            let height = container.offsetHeight + state.gap;\n            for (const item of task) {\n                item.style.transform = `translateY(${height * offset}px)`;\n                height += item.firstElementChild.offsetHeight + state.gap;\n            }\n            const animation = container.animate({ opacity: [0, 1], transform: [`translateY(calc(${offset * -100}% + 16px))`, ''], pointerEvents: 'auto' }, { ...getAnimateOptions(), fill: 'forwards' });\n            this.dispatchEvent(new Event('show'));\n            this.duration > 0 && (state.timer = setTimeout(close, this.duration));\n            popup.dataset.align = align;\n            task.unshift(popup);\n            animation.finished.then(() => this.dispatchEvent(new Event('showed')));\n        };\n        const close = () => {\n            if (!this.isConnected || !popup.classList.contains('show'))\n                return;\n            clearTimeout(state.timer);\n            const align = popup.dataset.align;\n            const task = tasks[align];\n            const offset = { top: 1, bottom: -1 }[align];\n            const indexOf = task.indexOf(popup);\n            for (let i = indexOf + 1; i < task.length; i++) {\n                const item = task[i];\n                const h = Math.abs(Number(item.style.transform.slice(11).slice(0, -3)));\n                item.style.transform = `translateY(${(h - container.offsetHeight - state.gap) * offset}px)`;\n            }\n            const animation = container.animate({ opacity: [1, 0], transform: `translateY(calc(${offset * -100}% + 16px))` }, getAnimateOptions());\n            this.dispatchEvent(new Event('close'));\n            animation.finished.then(() => {\n                if (popup.hidePopover)\n                    popup.hidePopover();\n                popup.removeAttribute('style');\n                popup.classList.remove('show');\n                this.dispatchEvent(new Event('closed'));\n            });\n            task.splice(indexOf, 1);\n        };\n        container.onmouseenter = () => clearTimeout(state.timer);\n        container.onmouseleave = () => popup.classList.contains('show') && this.duration > 0 && (state.timer = setTimeout(close, this.duration));\n        shadowRoot.querySelector('slot[name=trigger]').onclick = show;\n        shadowRoot.querySelector('slot[name=action]').onclick = close;\n        return {\n            expose: { show, close },\n        };\n    }\n}) {\n}\nSnackbar.define(name);\n"],
  "mappings": "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",
  "names": ["useElement", "useProps", "useEvents", "getStackingContext", "mediaQueryList", "convertCSSDuration", "name", "props", "events", "style", "template", "builder", "options", "root", "snackbar", "Snackbar", "page", "action", "tasks", "shadowRoot", "popup", "container", "computedStyle", "getAnimateOptions", "easing", "duration", "state", "getAlign", "show", "rect", "align", "task", "offset", "height", "item", "animation", "close", "indexOf", "i", "h"]
}
