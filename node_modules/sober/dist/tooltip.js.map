{
  "version": 3,
  "sources": ["tooltip.js"],
  "sourcesContent": ["import { useElement, useProps } from './core/element.js';\nimport { mediaQueryList } from './core/utils/mediaQuery.js';\nimport { getStackingContext } from './core/utils/getStackingContext.js';\nimport { convertCSSDuration } from './core/utils/CSSUtils.js';\nconst name = 's-tooltip';\nconst props = useProps({\n    align: ['top', 'bottom', 'left', 'right'],\n    disabled: false\n});\nconst style = `:host{display:inline-flex;vertical-align:middle;text-align:left}.popup{position:fixed;display:none;inset:0;margin:0;width:fit-content;height:fit-content;background:none;border:none;outline:none;max-width:none;max-height:none;font-size:.875rem;font-weight:400;padding:6px 8px;border-radius:4px;white-space:nowrap;filter:opacity(.88);background:var(--s-color-inverse-surface, #2E3132);color:var(--s-color-inverse-on-surface, #EFF1F3)}::slotted(img){display:block;border-radius:4px;margin:2px 0;max-width:280px}`\nconst template = `<slot name=\"trigger\" part=\"trigger\"></slot><div class=\"popup\" popover=\"manual\" part=\"popup\"><slot></slot></div>`\nexport class Tooltip extends useElement({\n    style, template, props,\n    setup(shadowRoot) {\n        const trigger = shadowRoot.querySelector('slot[name=trigger]');\n        const popup = shadowRoot.querySelector('.popup');\n        const computedStyle = getComputedStyle(this);\n        let showed = false;\n        const getAnimateOptions = () => {\n            const easing = computedStyle.getPropertyValue('--s-motion-easing-standard') || \"cubic-bezier(0.2, 0, 0, 1.0)\" /* Theme.motionEasingStandard */;\n            const duration = computedStyle.getPropertyValue('--s-motion-duration-medium4') || \"400ms\" /* Theme.motionDurationMedium4 */;\n            return { easing: easing, duration: convertCSSDuration(duration) };\n        };\n        const show = () => {\n            if (!this.isConnected || this.disabled)\n                return;\n            popup.style.display = 'block';\n            showed = true;\n            if (popup.showPopover) {\n                popup.showPopover();\n            }\n            else {\n                const rect = getStackingContext(shadowRoot);\n                popup.style.marginLeft = `${-rect.left}px`;\n                popup.style.marginTop = `${-rect.top}px`;\n                popup.style.zIndex = '3';\n            }\n            const rect = this.getBoundingClientRect();\n            const gap = 4;\n            const cWidth = popup.offsetWidth;\n            const cHeight = popup.offsetHeight;\n            const position = { top: 0, left: 0 };\n            const calls = {\n                middle(align) {\n                    position.left = rect.left - ((cWidth - rect.width) / 2);\n                    const bottom = () => {\n                        position.top = rect.top + rect.height + gap;\n                        return position.top + cHeight > innerHeight;\n                    };\n                    const top = () => {\n                        position.top = rect.top - cHeight - gap;\n                        return position.top < 0;\n                    };\n                    if (position.left < 0)\n                        position.left = rect.left;\n                    if (position.left + cWidth > innerWidth)\n                        position.left = rect.left + rect.width - cWidth;\n                    if (align === 'top')\n                        top() && bottom();\n                    if (align === 'bottom')\n                        bottom() && top();\n                },\n                left() {\n                    position.left = rect.left - cWidth - gap;\n                    position.top = rect.top - ((cHeight - rect.height) / 2);\n                    return position.left < 0;\n                },\n                right() {\n                    position.left = rect.left + rect.width + gap;\n                    position.top = rect.top - ((cHeight - rect.height) / 2);\n                    return position.left + cWidth > innerWidth;\n                }\n            };\n            switch (this.align) {\n                case 'bottom':\n                case 'top':\n                    calls.middle(this.align);\n                    break;\n                case 'left':\n                    calls.left() && calls.right();\n                    break;\n                case 'right':\n                    calls.right() && calls.left();\n                    break;\n            }\n            popup.style.top = `${position.top}px`;\n            popup.style.left = `${position.left}px`;\n            popup.animate({ opacity: [0, 1] }, getAnimateOptions());\n        };\n        let timer = 0;\n        const close = () => {\n            clearTimeout(timer);\n            showed = false;\n            const animation = popup.animate({ opacity: [1, 0] }, getAnimateOptions());\n            animation.finished.then(() => {\n                if (showed)\n                    return;\n                popup.hidePopover && popup.hidePopover();\n                popup.style.removeProperty('display');\n            });\n        };\n        trigger.addEventListener('touchstart', () => {\n            if (mediaQueryList.pointerFine.matches)\n                return;\n            clearTimeout(timer);\n            timer = setTimeout(() => show(), 600);\n        }, { passive: true });\n        trigger.ontouchend = () => {\n            clearTimeout(timer);\n            close();\n        };\n        trigger.onmouseenter = () => mediaQueryList.pointerFine.matches && show();\n        trigger.onmouseleave = () => mediaQueryList.pointerFine.matches && close();\n    }\n}) {\n}\nTooltip.define(name);\n"],
  "mappings": "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",
  "names": ["useElement", "useProps", "mediaQueryList", "getStackingContext", "convertCSSDuration", "name", "props", "style", "template", "Tooltip", "shadowRoot", "trigger", "popup", "computedStyle", "showed", "getAnimateOptions", "easing", "duration", "show", "rect", "gap", "cWidth", "cHeight", "position", "calls", "align", "bottom", "top", "timer", "close"]
}
